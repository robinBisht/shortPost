{"version":3,"sources":["context/auth.js","utils/AuthRoute.js","components/Menubar.js","utils/graphql.js","components/LikeButton.js","components/DeleteButton.js","components/PostCard.js","utils/hooks.js","components/PostForm.js","pages/home.js","pages/login.js","pages/register.js","pages/SinglePost.js","App.js","serviceWorker.js","ApolloProvider.js","index.js"],"names":["initialState","user","localStorage","getItem","dtoken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","AuthRoute","Component","component","rest","useContext","render","to","MenuBar","pathname","window","location","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","size","color","Item","username","active","as","Link","position","onClick","FETCH_POSTS_QUERY","gql","LIKE_POST_MUTATION","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","useMutation","variables","postId","likePost","likeButton","Button","Icon","basic","labelPosition","Popup","inverted","content","trigger","Label","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","callback","commentId","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","getPosts","filter","p","writeQuery","deletePostOrMutation","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","Content","Image","src","Header","Meta","moment","fromNow","Description","extra","useForm","values","setValues","onChange","event","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","unshift","error","Form","Field","Input","placeholder","className","graphQLErrors","message","Home","useQuery","loading","Grid","columns","Row","Column","Transition","Group","map","key","marginBottom","LOGIN_USER","Login","context","errors","setErrors","logUser","password","_","history","push","onError","err","extensions","exception","noValidate","label","primary","Object","keys","length","REGISTER_USER","Register","addUser","email","confirmPassword","FETCH_POST_QUERY","SUBMIT_COMMENT_MUTATION","SinglePost","postMarkup","match","params","commentInputRef","useRef","comment","setComment","current","blur","submitComment","getPost","comments","width","float","fluid","console","log","ref","disabled","trim","App","Container","exact","Boolean","hostname","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e52c82f8.chunk.js","sourcesContent":["import React, {createContext, useReducer} from 'react';\nimport jwtDecode from 'jwt-decode';\n\nconst initialState = {\n    user:null\n}\n\nif(localStorage.getItem('jwtToken')){\n    const dtoken = jwtDecode(localStorage.getItem('jwtToken'));\n\n    if(dtoken.exp * 1000 < Date.now() ){\n        localStorage.removeItem('jwtToken')\n    }\n    else{\n        initialState.user = dtoken;\n    }\n}\n\nconst AuthContext = createContext({\n    user:null,\n    login: (userData)=>{},\n    logout:()=>{}\n})\n\nfunction authReducer(state,action){\n    switch(action.type){\n        case 'LOGIN':\n            return{\n                ...state,\n                user: action.payload\n            }\n        case 'LOGOUT':{\n            return{\n                ...state,\n                user:null\n            }\n        }\n        default:\n            return state\n    }\n}\n\nfunction AuthProvider(props){\n    const [state,dispatch] = useReducer(authReducer,initialState)\n\n    function login(userData){\n        localStorage.setItem(\"jwtToken\",userData.token)\n        dispatch({\n            type:'LOGIN',\n            payload:userData\n        })\n    }\n\n    function logout(){\n        localStorage.removeItem('jwtToken')\n        dispatch({type:'LOGOUT'})\n    }\n\n    return(\n        <AuthContext.Provider\n        value={{user:state.user,login,logout}}\n        {...props} />\n    )\n}\n\nexport {AuthContext,AuthProvider}","import React, {useContext} from 'react'\nimport { Route,Redirect } from \"react-router-dom\";\n\nimport {AuthContext} from '../context/auth'\n\nfunction AuthRoute({component: Component, ...rest}){\n    const {user} = useContext(AuthContext)\n\n    return(\n        <Route\n            {...rest}\n            render={(props)=>\n                user ? <Redirect to=\"/\" /> : <Component {...props}/>\n            }\n        />\n    )\n}\n\nexport default AuthRoute;","import React, { useState, useContext } from 'react'\nimport { Menu} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom';\n\nimport {AuthContext} from '../context/auth'\n\nfunction MenuBar() {\n  const {user,logout} = useContext(AuthContext)  \n  const pathname = window.location.pathname;\n  const path = pathname === '/' ? 'home' : pathname.substr(1);\n  const [activeItem,setActiveItem] = useState(path)\n\n  const handleItemClick = (e, { name }) =>setActiveItem( name );\n  \n  const menuBar = user ? (\n    (\n      <Menu pointing secondary size=\"massive\" color=\"teal\">\n        <Menu.Item\n          name={user.username}\n          active\n          as={Link}\n          to=\"/\"\n        />\n        <Menu.Menu position='right'>\n          <Menu.Item\n            name='logout'\n            onClick={logout}\n            as={Link}\n            to=\"/login\"\n          />\n        </Menu.Menu>\n      </Menu>\n  )\n\n  ) :\n  (\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\n      <Menu.Item\n        name='home'\n        active={activeItem === 'home'}\n        onClick={handleItemClick}\n        as={Link}\n        to=\"/\"\n      />\n      <Menu.Menu position='right'>\n        <Menu.Item\n          name='register'\n          active={activeItem === 'register'}\n          onClick={handleItemClick}\n          as={Link}\n          to=\"/register\" />\n        <Menu.Item\n          name='login'\n          active={activeItem === 'login'}\n          onClick={handleItemClick}\n          as={Link}\n          to=\"/login\"\n        />\n      </Menu.Menu>\n    </Menu>\n)\n\n    return menuBar\n}\n\nexport default MenuBar","import gql from 'graphql-tag'\nexport const FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;","import React, {useEffect,useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport {useMutation} from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { Button,Label,Icon, Popup } from 'semantic-ui-react';\n\nfunction LikeButton({user,post: {id,likeCount,likes}}){\n    const [liked,setLiked] = useState(false)\n     useEffect(()=>{\n         if(user && likes.find(like => like.username === user.username)){\n            setLiked(true)\n         } else setLiked(false)\n     }, [user,likes]);\n\n     const [likePost] = useMutation(LIKE_POST_MUTATION,{\n         variables:{postId:id}\n     })\n\n     const likeButton = user ? (\n         liked ? (\n             <Button color=\"teal\">\n                 <Icon name=\"heart\" />\n\n             </Button>\n         ) : (\n             <Button color='teal' basic>\n                 <Icon name=\"heart\" />\n             </Button>\n         )\n     ) :(\n         <Button as={Link} to=\"/login\" color=\"teal\" basic>\n             <Icon name=\"heart\" />\n\n         </Button>\n     )\n\n     return (\n         <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\n             <Popup inverted content={liked ? 'Unlike':'Like'} trigger={\n                 likeButton\n             } />\n             <Label basic color=\"teal\" pointing=\"left\">\n                 {likeCount}\n             </Label>\n         </Button>\n     )\n}\n\nconst LIKE_POST_MUTATION = gql`\n    mutation likePost($postId:ID!){\n        likePost(postId:$postId){\n            id\n            likes{\n                id\n                username\n            }\n            likeCount\n        }\n    }\n`\n\nexport default LikeButton;","import React, {useState} from 'react'\nimport gql from 'graphql-tag'\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Button, Icon, Confirm, Popup } from 'semantic-ui-react';\n\nimport {FETCH_POSTS_QUERY} from '../utils/graphql'\n\nfunction DeleteButton({callback,postId,commentId}){\n    const [confirmOpen,setConfirmOpen] = useState(false)\n\n    const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION\n    const [deletePostOrMutation] = useMutation(mutation, {\n        update(proxy) {\n          setConfirmOpen(false);\n          if(!commentId){\n            const data = proxy.readQuery({\n              query: FETCH_POSTS_QUERY\n            });\n            data.getPosts = data.getPosts.filter((p) => p.id !== postId);\n            proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n          }\n          if (callback) callback();\n        },\n        variables: {\n          postId,\n          commentId\n        }\n      });\n    return(\n        <>\n       <Popup inverted content={ commentId ? \"Delete comment\" : \"Delete Post\" } trigger={\n          <Button\n          as=\"div\"\n          color=\"red\"\n          floated=\"right\"\n          onClick={()=> setConfirmOpen(true)}\n      >\n          <Icon name=\"trash\" style={{margin:0}} />\n      </Button>\n       } />\n        <Confirm\n        open={confirmOpen}\n        onCancel={()=> setConfirmOpen(false)}\n        onConfirm={deletePostOrMutation} />\n\n        </>\n    )\n}\n\nconst DELETE_POST_MUTATION = gql`\n    mutation deletePost($postId:ID!){\n        deletePost(postId:$postId)\n    }\n`\n\nconst DELETE_COMMENT_MUTATION = gql`\n  mutation deleteComment($postId:ID!, $commentId:ID!){\n    deleteComment(postId: $postId, commentId:$commentId){\n      id\n      comments{\n        id\n        username\n        createdAt\n        body\n\n      }\n      commentCount\n    }\n  }\n`\n\nexport default DeleteButton;","import React, {useContext} from 'react'\nimport {Card, Icon, Label, Image, Button , Popup} from 'semantic-ui-react';\nimport moment from 'moment'\nimport { Link } from 'react-router-dom';\n\nimport {AuthContext} from '../context/auth'\nimport LikeButton from './LikeButton'\nimport DeleteButton from './DeleteButton'\n\nfunction PostCard({post:{body, createdAt, id, username, likeCount, commentCount, likes}}) {\n    \n  const {user} = useContext(AuthContext)\n\n    return (\n        <Card>\n      <Card.Content>\n        <Image\n          floated='right'\n          size='mini'\n          src='https://react.semantic-ui.com/images/avatar/large/molly.png'\n        />\n<Card.Header>{username}</Card.Header>\n        <Card.Meta as={Link} to={`/posts/${id}`}> {moment(createdAt).fromNow(true)} </Card.Meta>\n        <Card.Description>\n          {body}\n        </Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n      <LikeButton user={user} post={{id, likes, likeCount}}/>\n    <Popup content=\"Comment on post\" inverted trigger={ <Button labelPosition='right' as={Link} to=\"/posts/${id}\">\n      <Button color='teal' basic>\n        <Icon name='comments' />\n      </Button>\n      <Label basic color='teal' pointing='left'>\n        {commentCount}\n      </Label>\n    </Button> } />\n    {user && user.username === username && <DeleteButton postId={id} /> }\n      </Card.Content>\n    </Card>\n    ) \n}\n\nexport default PostCard","import {useState} from 'react';\n\nexport const useForm = (callback,initialState={}) =>{\n    const [values,setValues] = useState(initialState)\n\n    const onChange = (event) =>{\n        setValues({...values,[event.target.name]:event.target.value})\n    }\n\n    const onSubmit = event=>{\n        event.preventDefault();\n        callback()\n    }\n\n    return {\n        onChange,\n        onSubmit,\n        values\n    }\n}","import React from 'react'\nimport {Form, Button} from 'semantic-ui-react'\nimport gql from 'graphql-tag'\nimport {useMutation} from '@apollo/react-hooks'\n\nimport {FETCH_POSTS_QUERY} from '../utils/graphql'\nimport {useForm} from '../utils/hooks'\n\nfunction PostForm(){\n\n    const {values, onChange,onSubmit} = useForm(createPostCallback,{\n        body:''\n    })\n\n    const [createPost, {error}] = useMutation(CREATE_POST_MUTATION,{\n        variables:values,\n        update(proxy,result){\n\n            const data = proxy.readQuery({\n                query: FETCH_POSTS_QUERY,\n                variables:values\n            })\n\n            data.getPosts.unshift(result.data.createPost);\n            proxy.writeQuery({query:FETCH_POSTS_QUERY,data})\n            values.body = '';\n        }\n    })\n\n    function createPostCallback(){\n        createPost()\n    }\n\n    return (\n        <>\n        <Form onSubmit={onSubmit}>\n            <h2>Create a Post:</h2>\n            <Form.Field>\n                <Form.Input \n                    placeholder=\"Hi World\"\n                    name=\"body\"\n                    onChange={onChange}\n                    value={values.body}\n                    error = {error ? true:false}\n                />\n                <Button type=\"submit\" color=\"teal\">\n                    Submit\n                </Button>\n            </Form.Field>\n        </Form>\n        { error && (\n            <div className=\"ui error message\">\n                <ul className=\"list\">\n                    <li> {error.graphQLErrors[0].message} </li>\n                </ul>\n            </div>\n        )}\n        </>\n    )\n}\n\nconst CREATE_POST_MUTATION = gql`\nmutation createPost($body:String!){\n    createPost(body:$body){\n        id\n        body\n        createdAt\n        username\n        likes{\n            id\n            username\n            createdAt\n        }\n        likeCount\n        comments{\n            id\n            body\n            username\n            createdAt\n        }\n        commentCount\n    }\n}\n`;\n\nexport default PostForm","import React, { useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Grid ,Transition} from 'semantic-ui-react';\n\nimport {FETCH_POSTS_QUERY} from '../utils/graphql'\nimport {AuthContext} from '../context/auth';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\n\nfunction Home() {\n  const {user} = useContext(AuthContext)\n  const {\n    loading,\n    data\n  } = useQuery(FETCH_POSTS_QUERY);\n\n  return (\n    <Grid columns={3}>\n      <Grid.Row className=\"page-title\">\n        <h1>Recent Posts</h1>\n      </Grid.Row>\n      <Grid.Row>\n        {user && (\n          <Grid.Column>\n            <PostForm />\n          </Grid.Column>\n        )}\n\n        {loading ? (\n          <div className=\"ui active centered inline loader\"></div>\n        ) : \n         (\n          <Transition.Group>\n            {data.getPosts &&\n            data.getPosts.map((post) => (\n              <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\n                <PostCard post={post} />\n              </Grid.Column>\n            ))}\n          </Transition.Group> \n         )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n\n\nexport default Home;","import React, {useState, useContext} from 'react';\nimport {Button, Form } from 'semantic-ui-react';\nimport {useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n \nimport {AuthContext} from '../context/auth'\nimport {useForm} from '../utils/hooks'\n\nfunction Login(props) {\n    const context = useContext(AuthContext)\n    const [errors,setErrors] = useState({})\n\n    const {onChange,onSubmit,values} = useForm(loginUser,{\n        username:'',\n        password:''\n    })\n\n    const [logUser, {loading}] = useMutation(LOGIN_USER,{\n        update(_,result){\n            context.login(result.data.login) //user data coming after login\n            props.history.push('/')\n        },\n        onError(err){\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\n        },\n        variables: values\n    })\n\n    function loginUser(){\n        logUser();\n    }\n\n\n    return (\n        <div className=\"form-container\" >\n            <Form onSubmit={onSubmit} noValidate className={loading?\"loading\":\"\"}>\n                <h1>Login</h1>\n                <Form.Input\n                    label=\"Username\"\n                    placeholder=\"Username..\"\n                    name=\"username\"\n                    type=\"text\"\n                    error={errors.username ? true:false}\n                    value={values.username}\n                    onChange={onChange} />\n                <Form.Input\n                    label=\"Password\"\n                    placeholder=\"Password..\"\n                    name=\"password\"\n                    type=\"text\"\n                    error={errors.password ? true:false}\n                    value={values.password}\n                    onChange={onChange} />\n                <Button type='submit' primary >\n                    Login\n                </Button>\n            </Form>\n            {Object.keys(errors).length > 0 && (\n                <div className=\"ui error message\">\n                <ul className='list'>\n                    { Object.values(errors).map(value=>(\n                        <li key={value} > {value} </li>                        \n                    ))}\n                </ul>\n            </div>\n            )}\n        </div>\n    )\n}\n\nconst LOGIN_USER = gql`\n    mutation login(\n        $username: String!,\n        $password: String!\n    ){\n        login(\n            username: $username,\n            password: $password\n        ){\n            id email username createdAt token\n        }\n    }\n`\nexport default Login;","import React, {useState, useContext} from 'react';\nimport {Button, Form } from 'semantic-ui-react';\nimport {useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n \nimport {AuthContext} from '../context/auth'\nimport {useForm} from '../utils/hooks'\n\nfunction Register(props) {\n    const context = useContext(AuthContext)\n    const [errors,setErrors] = useState({})\n\n    const {onChange,onSubmit,values} = useForm(registerUser,{\n        username:'',\n        email:'',\n        password:'',\n        confirmPassword:''\n    })\n\n    const [addUser, {loading}] = useMutation(REGISTER_USER,{\n        update(_,result){\n            context.login(result.data.login)\n            props.history.push('/')\n        },\n        onError(err){\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\n        },\n        variables: values\n    })\n\n    function registerUser(){\n        addUser();\n    }\n\n\n    return (\n        <div className=\"form-container\" >\n            <Form onSubmit={onSubmit} noValidate className={loading?\"loading\":\"\"}>\n                <h1>Register</h1>\n                <Form.Input\n                    label=\"Username\"\n                    placeholder=\"Username..\"\n                    name=\"username\"\n                    type=\"text\"\n                    error={errors.username ? true:false}\n                    value={values.username}\n                    onChange={onChange} />\n                <Form.Input\n                    label=\"Email\"\n                    placeholder=\"Email..\"\n                    name=\"email\"\n                    type=\"text\"\n                    error={errors.email ? true:false}\n                    value={values.email}\n                    onChange={onChange} />\n                <Form.Input\n                    label=\"Password\"\n                    placeholder=\"Password..\"\n                    name=\"password\"\n                    error={errors.password ? true:false}\n                    type=\"text\"\n                    value={values.password}\n                    onChange={onChange} />\n                <Form.Input\n                    label=\"confirmPassword\"\n                    placeholder=\"Confirm Password..\"\n                    name=\"confirmPassword\"\n                    error={errors.confirmPassword ? true:false}\n                    type=\"text\"\n                    value={values.confirmPassword}\n                    onChange={onChange} />\n                <Button type='submit' primary >\n                    Register\n                </Button>\n            </Form>\n            {Object.keys(errors).length > 0 && (\n                <div className=\"ui error message\">\n                <ul className='list'>\n                    { Object.values(errors).map(value=>(\n                        <li key={value} > {value} </li>                        \n                    ))}\n                </ul>\n            </div>\n            )}\n        </div>\n    )\n}\n\nconst REGISTER_USER = gql`\n    mutation register(\n        $username: String!\n        $email: String!\n        $password: String!\n        $confirmPassword:String!\n    ){\n        register(\n            registerInput: {\n                username: $username\n                email: $email\n                password:$password\n                confirmPassword:$confirmPassword\n            }\n        ){\n            id email username createdAt token\n        }\n    }\n`\nexport default Register;","import React, { useContext, useState, useRef } from 'react';\nimport gql from 'graphql-tag';\n\nimport {useQuery, useMutation} from '@apollo/react-hooks'\nimport { Grid, Button,Card,Image,Icon,Label, Comment , Form} from 'semantic-ui-react';\nimport moment from 'moment'\nimport LikeButton from '../components/LikeButton';\n\nimport {AuthContext} from '../context/auth'\nimport DeleteButton from '../components/DeleteButton';\n\nfunction SinglePost(props){\n    const postId = props.match.params.postId\n    const {user} = useContext(AuthContext)\n    const commentInputRef = useRef(null)\n\n    const [comment,setComment] = useState('')\n    const {data} = useQuery(FETCH_POST_QUERY,\n         {\n             variables:{\n                 postId\n             }\n         }\n    )\n    const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION,{\n        update(){\n            setComment('');\n            commentInputRef.current.blur()\n        },\n        variables:{\n            postId,\n            body:comment\n        }\n    })\n\n    function deletePostCallback() {\n        props.history.push('/');\n      }    \n\n\n    let postMarkup;\n    if(!data.getPost){\n        postMarkup = <p> Loading Post...... </p>\n    } else {\n        const {id, body,createdAt,username,comments,likes,likeCount,commentCount} = data.getPost;\n\n\n        \n        postMarkup = (\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={2}>\n                    <Image \n                        src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n                        size=\"small\"\n                        float=\"right\"\n                    />\n                    </Grid.Column>\n                    <Grid.Column width={10}>\n                        <Card fluid>\n                            <Card.Content>\n                                <Card.Header>\n                                    {username}\n                                </Card.Header>\n                                <Card.Meta>\n                                    {moment(createdAt).fromNow()}\n                                </Card.Meta>\n                                <Card.Content>\n                                    {body}\n                                </Card.Content>\n                            </Card.Content>\n                            <hr/>\n                            <Card.Content extra>\n                                <LikeButton user={user} post={{id, likeCount,likes}} />\n                                <Button as=\"div\"\n                                    labelPosition=\"right\"\n                                    onClick={()=>console.log('Comment on post')}>\n                                        <Button basic color=\"blue\" pointing=\"left\">\n                                            <Icon name=\"comments\" />\n                                        </Button>\n                                        <Label basic color=\"blue\" pointing=\"left\">\n                                            {commentCount}\n                                        </Label>\n                                    </Button>\n                                    {user && user.username === username && (\n                                        <DeleteButton postId={id} callback={deletePostCallback} />\n                                    )}\n                            </Card.Content>\n                        </Card>\n                        { user && (\n                            <Card fluid>\n                                <Card.Content>\n                                <p>Post a comment</p>\n                                <Form>\n                                    <div className=\"ui action input fluid\">\n                                        <input \n                                        type=\"text\"\n                                        placeholder=\"Comment...\" \n                                        name=\"comment\"\n                                        value={comment}\n                                        onChange={event => setComment(event.target.value)}\n                                        ref={commentInputRef} />\n                                        <button type=\"submit\" \n                                        className=\"ui button teal\"\n                                        disabled={comment.trim() === ''}\n                                        onClick={submitComment} >\n                                            Submit\n                                        </button>\n                                    </div>\n                                </Form>\n                                </Card.Content>\n                            </Card>\n                        ) }\n                        {comments.map(comment => (\n                            <Card fluid key={comment.id}>\n                                <Card.Content>\n                                    { user && user.username === comment.username && (\n                                        <DeleteButton postId={id} commentId={comment.id} />\n                                    ) }\n                                    <Card.Header>{comment.username}</Card.Header>\n                                    <Card.Meta> {moment(comment.createdAt).fromNow()} </Card.Meta>\n                                    <Card.Description> {comment.body} </Card.Description>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n    return postMarkup;\n\n    \n}\n\nconst FETCH_POST_QUERY = gql`\n    query($postId:ID!){\n        getPost(postId: $postId){\n            id\n            body\n            createdAt\n            username\n            likeCount\n            likes{\n                username\n            }\n\n            commentCount\n            comments{\n                id\n                username\n                createdAt\n                body\n            }\n        }\n    }\n`;\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n    mutation($postId:ID!, $body:String!){\n        createComment(postId: $postId, body:$body){\n            id\n            comments{\n                id \n                body\n                createdAt\n                username\n            }\n            commentCount\n        }\n    }\n`\n\nexport default SinglePost;"," import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nimport { AuthProvider } from './context/auth';\nimport AuthRoute from './utils/AuthRoute';\n\nimport MenuBar from './components/Menubar';\nimport Home from './pages/home';\nimport Login from './pages/login';\nimport Register from './pages/register';\nimport SinglePost from './pages/SinglePost';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Route exact path=\"/\" component={Home} />\n          <AuthRoute exact path=\"/login\" component={Login} />\n          <AuthRoute exact path=\"/register\" component={Register} />\n          <Route exact path=\"/posts/:postId\" component={SinglePost} />\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport App  from './App';\nimport ApolloClient from 'apollo-client';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {createHttpLink} from 'apollo-link-http';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport {setContext} from 'apollo-link-context';\n\nconst httpLink = createHttpLink({\n    uri:'http://localhost:5000'\n})\n\nconst authLink = setContext(() =>{\n    const token = localStorage.getItem('jwtToken')\n    return {\n        headers:{\n            Authorization: token ? `Bearer ${token}`:''\n        }\n    }\n})\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n})\n\n\n\nexport default (\n    <ApolloProvider client={client}>\n        <App/>\n    </ApolloProvider>\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloProvider from './ApolloProvider';\n\nReactDOM.render(ApolloProvider, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}